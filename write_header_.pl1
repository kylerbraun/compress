/* -*- indent-tabs-mode: nil -*- */
write_header_: procedure(destination, order, codes, padding_size)
    returns(fixed binary(24));

declare destination pointer;
declare order(0:511) fixed binary(9);
declare codes(0:511) bit(20) varying;
declare padding_size fixed binary(4);

declare bits bit(255*1024*36) based(destination);
declare i fixed binary(10);
declare used fixed binary(24) initial(0);

do i = lbound(order, 1) to hbound(order, 1) while(length(codes(order(i))) > 0);
   call append_fixed((order(i)), 9);
end;

/* Terminate list with repeated first element, or 0-1-1 if there are no
   elements.  These terminators are recognizable because they contain repeated
   elements, which cannot occur in the payload itself. */
/* If the input is empty, don't generate a header. */
if i = 0
   then return(used);
/* Terminate list with repeated first element.  This terminator is recognizable
   because it contains a repeated element, which cannot occur in the payload
   itself. */
else if i <= hbound(order, 1)
   then call append_fixed((order(0)), 9);

do i = lbound(order, 1) to hbound(order, 1) while(length(codes(order(i))) > 0);
   call append_fixed(length(codes(order(i))), 5);
end;

call append_fixed((padding_size), 4);

return(used);

append: procedure(datum);
   declare datum bit(*) varying;
   substr(bits, used + 1, length(datum)) = datum;
   used = used + length(datum);
end;

append_fixed: procedure(datum, length);
   declare datum fixed binary(35);
   declare length fixed binary;
   declare to_append bit(35);
   to_append = convert(to_append, datum);
   call append(substr(to_append, 36 - length, length));
end;

end write_header_;
