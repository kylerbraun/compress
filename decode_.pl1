decode_: procedure(source, bytes, codes, used) returns(fixed binary(20));

declare source bit(*);
declare bytes(*) bit(9);
declare codes(0:511) bit(20) varying;
declare used fixed binary(24);

declare com_err_ entry options(variable);

declare compress_bad_code condition;
declare datum bit(10);
declare i fixed binary(10);
declare next_code bit(20) varying initial(""b);
declare written fixed binary(20) initial(0);

do used = used to length(source) - 1;
   next_code = next_code || substr(source, used + 1, 1);
   do i = lbound(codes, 1) to hbound(codes, 1);
      if length(next_code) = length(codes(i))
	    & next_code = codes(i) then do;
         datum = convert(datum, i);
	 written = written + 1;
	 bytes(written) = substr(datum, 2);
	 next_code = ""b;
	 goto next_bit;
      end;
   end;
   if length(next_code) = 20 then do;
      used = used - 20;
      signal condition(compress_bad_code);
      return(written);
   end;
next_bit:
end;

return(written);

end decode_;
