/* -*- indent-tabs-mode: nil -*- */
make_code_: procedure(bytes, order, codes);

/* This program compresses segments by generating a code and then translating
   the segment into that code.  A code is a mapping of bytes in the input
   segment to bit strings.  Confusingly, I also call each such bitstring a code.
   These codes are assigned so that no code is a prefix of any other code.  This
   allows the codes to be packed together in the output segment without any
   padding.  The output segment consists of a header, describing the code,
   followed by the translation of the input segment into the code.  Since this
   program works in whole bytes, if the input segment does not consist of a
   whole number of bytes, its bit count is be rounded up to the next multiple
   of 9 for purposes of compression.  The number of extra bits included this way
   is recorded in the header, so that the original bit count can be recovered.
   See write_header_ for details of the header format.

   This procedure generates a code based on the contents of bytes.  The code is
   generated so that the length of each byte's code is close to the total number
   of bytes divided by the number of instances of that byte.  The code is
   generated so as to create no gaps, meaning that any bit string that is not a
   valid sequence of packed codes can be made valid by appending extra bits to
   it. */

%include external;
%include count_bytes_;
declare length builtin;

declare bytes(*) bit(9);
/* (output) Unique bytes in decreasing order of frequency. */
declare order(0:511) fixed binary(9);
/* (output) Table of codes, indexed by the corresponding byte.  If a byte does
   not occur in the input segment, its entry in this array will contain an empty
   bit string instead. */
declare codes(0:511) bit(20) varying;

declare code_value fixed binary(21);
declare count fixed binary(35) based(counts_sorted.vector(i));
declare counts(0:511) fixed binary(35);
declare 01 counts_sorted aligned,
           02 length fixed binary(18) initial(512),
           02 vector(0:511) pointer unaligned;
declare i fixed binary(10);
declare j fixed binary(5);
declare next_code bit(21) varying initial("0"b);
declare num_used_byte_values fixed binary(10) initial(0);
declare offset fixed binary(18);
declare total fixed binary(21) initial(0);

counts = count_bytes_(bytes);

do i = lbound(counts, 1) to hbound(counts, 1);
   counts_sorted.vector(i) = addr(counts(i));
end;

call sort_items_$fixed_bin(addr(counts_sorted));

do i = hbound(counts_sorted.vector, 1) to lbound(counts_sorted.vector, 1) by -1;
   offset = convert(offset, rel(addr(count)));
   order(511 - i) = offset - convert(offset, rel(addr(counts)));
end;

do i = lbound(counts, 1) to hbound(counts, 1);
   total = total + counts(i);
end;

do i = hbound(counts_sorted.vector, 1) to lbound(counts_sorted.vector, 1) by -1
       while(count > 0);
   num_used_byte_values = num_used_byte_values + 1;
end;

do i = hbound(counts_sorted.vector, 1)
          by -1
          while(allocations_left(i) > 0);
   /* The value of next_code will be extended with j zero bits before being used
      for the next allocation.  Find the value of j that minimizes
        |1/num_codes(j) - count/total|,
      where
        num_codes(j) = (2**length(next_code) - next_code)*2**j,
      i.e. the number of codes left once the code is extended by j bits. */
   do j = 0 by 1 while(count*num_codes(j) < total);
   end;
   if j > 0 then do;
      /* if |count/total - 1/num_codes(j)|
              > |count/total - 1/num_codes(j - 1)| */
      /* Since we don't want unnecessary divisions, we convert the above
      expression into units of 1/(total*num_codes(j)) before comparing. */
      if 3*total < count*num_codes(j + 1) | num_codes(j) > allocations_left(i)
         then j = j - 1;
   end;
   /* If there are more bytes to encode, make sure we leave some codes available
      for them. */
   if j = 0 & allocations_left(i) > 1
        & next_code = copy("1"b, length(next_code))
      then j = j + 1;

   next_code = next_code || copy("0"b, j);
   codes(order(511 - i)) = next_code;

   /* Increment the bit-string in next_code by 1 without increasing its length.
      Because of the check above, this will only overflow if there are no more
      bytes to encode, in which case we won't use next_code again. */
   code_value = convert(code_value, next_code);
   code_value = code_value + 1;
   next_code = substr(convert(next_code, code_value),
                      21 - length(next_code) + 1);

   total = total - count;
end;

do i = i to lbound(counts_sorted.vector, 1) by -1;
   codes(order(511 - i)) = ""b;
end;

allocations_left: procedure(n) returns(fixed binary(10));
   declare n fixed binary(10);
   return(num_used_byte_values + n - hbound(counts_sorted.vector, 1));
end;

num_codes: procedure(n) returns(fixed binary(20));
   /* This procedure calculates the fraction of the code space that would be
      consumed by the next code if it were extended by n bits. */
   declare code_value fixed binary(21);
   declare n fixed binary(5);
   code_value = convert(code_value, next_code);
   return((2**length(next_code) - code_value)*2**n);
end;

end make_code_;
