make_code_: procedure(bytes, order, codes);

declare count_bytes_
     entry(dimension(*) bit(9)) returns(dimension(0:511) fixed binary(35));
declare length builtin;
declare sort_items_$fixed_bin entry(pointer);

declare bytes(*) bit(9);
declare order(0:511) fixed binary(9);
declare codes(0:511) bit(20) varying;

declare code_value fixed binary(21);
declare count fixed binary(35) based(counts_sorted.vector(i));
declare counts(0:511) fixed binary(35);
declare 01 counts_sorted aligned,
	   02 length fixed binary(18) initial(512),
	   02 vector(0:511) pointer unaligned;
declare i fixed binary(10);
declare j fixed binary(5);
declare next_code bit(21) varying initial("0"b);
declare num_used_byte_values fixed binary(10) initial(0);
declare offset fixed binary(18);
declare total fixed binary(21) initial(0);

counts = count_bytes_(bytes);

do i = lbound(counts, 1) to hbound(counts, 1);
   counts_sorted.vector(i) = addr(counts(i));
end;

call sort_items_$fixed_bin(addr(counts_sorted));

do i = hbound(counts_sorted.vector, 1) to lbound(counts_sorted.vector, 1) by -1;
   offset = convert(offset, rel(addr(count)));
   order(511 - i) = offset - convert(offset, rel(addr(counts)));
end;

do i = lbound(counts, 1) to hbound(counts, 1);
   total = total + counts(i);
end;

do i = hbound(counts_sorted.vector, 1) to lbound(counts_sorted.vector, 1) by -1
       while(count > 0);
   num_used_byte_values = num_used_byte_values + 1;
end;

do i = hbound(counts_sorted.vector, 1)
	  by -1
	  while(allocations_left(i) > 0);
   /* The value of next_code will be extended with j zero bits before being used
      for the next allocation.  Find the value of j that minimizes
        |1/num_codes(j) - count/total|,
      where
        num_codes(j) = (2**length(next_code) - next_code)*2**j,
      i.e. the number of codes left once the code is extended by j bits. */
   do j = 0 by 1 while(count*num_codes(j) < total);
   end;
   if j > length(next_code) then do;
      /* if |count/total - 1/num_codes(j)|
	      > |count/total - 1/num_codes(j - 1)| */
      /* Since we don't want unnecessary divisions, we convert the above
      expression into units of 1/(total*num_codes(j)) before comparing. */
      if 3*total > 2*count*num_codes(j) | num_codes(j) > allocations_left(i)
	 then j = j - 1;
   end;
   /* If there are more bytes to encode, make sure we leave some codes available
      for them. */
   if j = 0 & allocations_left(i) > 1
	& next_code = copy("1"b, length(next_code))
      then j = j + 1;

   next_code = next_code || copy("0"b, j);
   codes(order(511 - i)) = next_code;

   /* Increment the bit-string in next_code by 1 without increasing its length.
      Because of the check above, this will only overflow if there are no more
      bytes to encode, in which case we won't use next_code again. */
   code_value = convert(code_value, next_code);
   code_value = code_value + 1;
   next_code = substr(convert(next_code, code_value),
		      21 - length(next_code) + 1);

   total = total - count;
end;

do i = i to lbound(counts_sorted.vector, 1) by -1;
   codes(order(511 - i)) = ""b;
end;

allocations_left: procedure(n) returns(fixed binary(10));
   declare n fixed binary(10);
   return(num_used_byte_values + n - hbound(counts_sorted.vector, 1));
end;

num_codes: procedure(n) returns(fixed binary(20));
   declare code_value fixed binary(21);
   declare n fixed binary(5);
   code_value = convert(code_value, next_code);
   return((2**length(next_code) - code_value)*2**n);
end;

end make_code_;
