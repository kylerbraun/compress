compress: procedure options(main);

%include external;
%include compress_;
%include decompress_;
%include print_header_;
%include write_into_;

declare argument character(argument_length) based(argument_pointer);
declare argument_length fixed binary(21);
declare argument_pointer pointer;
declare bits_read fixed binary(24);
declare brief bit initial("0"b);
declare cleanup label initial(finished);
declare command_name character(command_name_length) based(command_name_pointer);
declare command_name_length fixed binary(21);
declare command_name_pointer pointer;
declare compress_bad_code condition;
declare compress_fatal condition;
declare compressed_entryname character(32);
declare compressed_input bit(input_segment_bitcount)
     based(input_segment_pointer);
declare delete_$path entry(character(*), character(*), bit(36) aligned,
			   character(*), fixed binary(35));
declare error condition;
declare error_code fixed binary(35);
declare index fixed binary;
declare input_dir_name character(168);
declare input_segment_bitcount fixed binary(24);
declare input_segment_pointer pointer initial(null);
declare mode fixed binary;
declare mode_compress fixed binary static initial(0) options(constant);
declare mode_header fixed binary static initial(2) options(constant);
declare mode_decompress fixed binary static initial(1) options(constant);
declare null builtin;
declare output_segment_bitcount fixed binary(24);
declare output_segment_pointer pointer initial(null);
declare pathname character(pathname_length) based(pathname_pointer);
declare pathname_length fixed binary(21);
declare pathname_pointer pointer initial(null);
declare replace bit initial("0"b);
declare uncompressed_entryname character(32);
declare uncompressed_input(divide(input_segment_bitcount + 8, 9, 20)) bit(9)
     based(input_segment_pointer);
declare unknown character(9) static initial("(unknown)") options(constant);

mode = mode_compress;
goto start;

print_compressed_header: entry options(variable);
mode = mode_header;
goto start;

uncompress: entry options(variable);
mode = mode_decompress;

start:
on compress_fatal goto finished;

on compress_bad_code begin;
   call com_err_(0, command_name, "bad code at index ^d", bits_read);
   goto finished;
end;

call cu_$get_command_name(command_name_pointer, command_name_length,
			  error_code);
if error_code ^= 0 then do;
   command_name_pointer = addr(unknown);
   command_name_length = length(unknown);
end;

do index = 1 by 1;
   call cu_$arg_ptr(index, argument_pointer, argument_length, error_code);
   if error_code ^= 0 then do;
      goto end_arg_parse;
   end;
   if mode ^= mode_header then do;
      if argument = "-brief" then do;
	 brief = "1"b;
	 goto next_arg;
      end;
      if argument = "-replace" then do;
	 replace = "1"b;
	 goto next_arg;
      end;
   end;
   if substr(argument, 1, 1) = "-"
      then call fail(error_table_$badopt, argument);
   else do;
      if pathname_pointer = null then do;
	 pathname_length = argument_length;
	 pathname_pointer = argument_pointer;
      end;
      else call usage_error(0);
   end;
next_arg:
end;
end_arg_parse:

if pathname_pointer = null
   then call usage_error(error_table_$noarg);

call expand_pathname_$add_suffix(pathname, "fz", input_dir_name,
				 compressed_entryname, error_code);
call maybe_fail(error_code, "Could not expand input pathname.");
call suffixed_name_$new_suffix(compressed_entryname, "fz", "",
			       uncompressed_entryname, 0);

call hcs_$initiate_count
       (input_dir_name, input_entryname(), "", input_segment_bitcount, 0,
	input_segment_pointer, error_code);
if input_segment_pointer = null then do;
   call com_err_(error_code, command_name,
		 "Could not initiate input segment ^a>^a.", input_dir_name,
		 input_entryname());
   goto finished;
end;

if mode = mode_header then begin;
   call print_header_(compressed_input, "0"b);
   goto finished;
end;

call hcs_$make_seg(get_wdir_(), output_entryname(), "", 01010b,
		   output_segment_pointer, error_code);
if output_segment_pointer = null then do;
   call com_err_(error_code, command_name,
		 "Could not initiate output segment ^a.", output_entryname());
   goto finished;
end;
if error_code = error_table_$namedup
     | error_code = error_table_$segknown then begin;
   declare answer bit;
   call command_query_$yes_no(answer, error_table_$namedup, command_name, "",
			      "Do you want to delete the old segment ^a?",
			      output_entryname());
   if ^answer
      then goto finished;
end;

call write_into_(output_segment_pointer, write, command_name,
		 output_entryname());

if replace then do;
   call delete_$path(input_dir_name, input_entryname(), "100110"b, command_name,
		     error_code);
   input_segment_pointer = null;
   if error_code ^= 0 then do;
      call com_err_(error_code, command_name, "Could not delete ^a>^a.",
		    input_dir_name, input_entryname());
      goto finished;
   end;
end;

if ^brief
   then call ioa_("Old length = ^d, new length = ^d.",
		  divide(input_segment_bitcount + 1024*36 - 1, 1024*36, 9),
		  divide(output_segment_bitcount + 1024*36 - 1, 1024*36, 9));

write: procedure returns(fixed binary(24));
   if mode = mode_header
      then signal error;
   if mode = mode_decompress
      then output_segment_bitcount
	     = decompress_(compressed_input, output_segment_pointer, bits_read);
      else output_segment_bitcount
	     = compress_(uncompressed_input, output_segment_pointer,
			 input_segment_bitcount);
   return(output_segment_bitcount);
end;

input_entryname: procedure returns(character(*));
   if mode = mode_compress
      then return(uncompressed_entryname);
      else return(compressed_entryname);
end;

output_entryname: procedure returns(character(*));
   if mode = mode_header
      then signal error;
   if mode = mode_decompress
      then return(uncompressed_entryname);
      else return(compressed_entryname);
end;

fail: procedure(error_code, message);
   declare error_code fixed binary(35);
   declare message character(*);

   call com_err_(error_code, command_name, message);
   goto finished;
end;

maybe_fail: procedure(error_code, message);
   declare error_code fixed binary(35);
   declare message character(*);

   if error_code ^= 0
      then call fail(error_code, message);
end;

usage_error: procedure(error_code);
   declare error_code fixed binary(35);

   declare cu_error_code fixed binary(35);

   call com_err_(error_code, command_name, "Usage: ^a path {-control_args}",
		 command_name);
   goto finished;
end;

finished:

if input_segment_pointer ^= null then do;
   call hcs_$terminate_noname(input_segment_pointer, error_code);
   if error_code ^= 0 then do;
      call com_err_(error_code, command_name,
		    "Could not terminate input segment ^a>^a.", input_dir_name,
		    input_entryname());
   end;
end;

if output_segment_pointer ^= null then do;
   call hcs_$terminate_noname(output_segment_pointer, error_code);
   if error_code ^= 0 then do;
      call com_err_(error_code, command_name,
		    "Could not terminate output segment ^a.",
		    output_entryname());
   end;
end;

end compress;
